from bio import *
from getopt import getopt, GetoptError
from math import log, log2
import sys
import time

import blastn_ungapped
import blastn_gapped
import blastp_ungapped
import blastp_gapped

help = """
Arguments:

+------+------+---------+--------------------------------------------------------+
| Name | Type | Default | Explanation                                            |
+------+------+---------+--------------------------------------------------------+
|  -q  | str  |         | input query FASTA file                                 |
|  -t  | str  |         | input target FASTA file                                |
|  -T  | int  |  40     | ungapped extension score-drop from max score threshold |
|  -E  | float|  0.01   | report local alignments with expect value greater than |
|  -B  | str  |         | if N, BLASTn; if P, BLASTp                             |
|  -g  | str  |         | "gapped"/"ungapped" for gapped/ungapped alignment      |
|  -n  | int  |  15     | neighborhood distance threshold to perform gapped align|
+------+------+---------+--------------------------------------------------------+

Note: k-mer length is by default 11 for BLASTn and 3 for BLASTp. Immutable except in source.

Note: Output is written to a file: blast_<B>_<g>_output.txt.

Substitution matrices:

 > +5/-4 match/mismatch for BLASTn ungapped
 > +1/-3 match/mismatch, -5/-2 gap open/extend BLASTn gapped
 > BLOSUM62 match/mismatch for BLASTp ungapped
 > BLOSUM62 match/mismatch, -11, -1 gap open/extend for BLASTp gapped"""

opts = list[tuple[str, str]]()
args = list[str]()

q_input = ""
t_input = ""
T = 40
E = 0.01
B = ""
g = ""
n = 15

try:
    opts, args = getopt(sys.argv[1:], 'q:t:T:E:B:g:n')
except GetoptError:
    raise GetoptError('Bad option name.\n'+help)
    
if len(opts) < 4:
    raise GetoptError('Too many unnamed arguments.\n'+help)
    
for opt, val in opts:
    match opt:
        case '-q':
            try:
                f = open(val, 'r')
                f.close()
            except IOError:
                raise GetoptError(f'Query {val} does not exist.\n' + help)
            q_input = val
        case '-t':
            try:
                f = open(val, 'r')
                f.close()
            except IOError:
                raise GetoptError(f'Target {val} does not exist.\n' + help)
            t_input = val
        case '-T':
            try:
                if int(val) > 0:
                    T = int(val)
            except ValueError:
                raise GetoptError(f'T must be an int.\n' + help)
        case '-E':
            try:
                E = float(val)
            except ValueError:
                raise GetoptError(f'E must be a float.\n' + help)
        case '-B':
            try:
                if val == "N" or val == "P":
                    B = val
            except:
                raise GetoptError(f'B must be "N" (BLASTn) or "P" (BLASTp).\n' + help)
        case '-g':
            try:
                if val == "gapped" or val == "ungapped":
                    g = val
            except:
                raise GetoptError(f'g must be "ungapped" or "gapped".\n' + help)
        case '-n':
            try:
                n = int(val)
            except ValueError:
                raise GetoptError(f'n must be an int.\n' + help)
        case _ :
            raise GetoptError(help)

t = time.time()

if B == "N" and g == "ungapped":
    blastn_ungapped.run_blastn_ungapped(q_input, t_input, E)
    
elif B == "N" and g == "gapped":
    blastn_gapped.run_blastn_gapped(q_input, t_input, E, n)
    
elif B == "P" and g == "ungapped":
    blastp_ungapped.run_blastp_ungapped(q_input, t_input, T, E)

elif B == "P" and g == "gapped":
    blastp_gapped.run_blastp_gapped(q_input, t_input, T, E, n)
    
else:
    raise GetoptError('Please enter at least a query file and target file, and signify if you wouldl like to run gapped or ungapped BLASTn or BLASTp.' + help)

print("Total Time:", time.time()-t, "seconds.")
