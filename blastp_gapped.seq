from bio import *
from getopt import getopt, GetoptError
from math import log, log2
import sys
import time

def run_blastp_gapped(q_input, t_input, T, E, n):

    t1 = time.time()
    
    # initialize query and target sequence information and k-mer indices:
    
    q = p""
    t = p""

    q_name = ""
    t_name = ""

    q_index = {}
    t_index = {}

    K: Static[int] = 3

    blosum62 = {(p'W',p'F'): 1, (p'L',p'R'): -2, (p'S',p'P'): -1, (p'V',p'T'): 0, (p'Q',p'Q'): 5, (p'N',p'A'): -2, (p'Z',p'Y'): -2, (p'W',p'R'): -3, (p'Q',p'A'): -1, (p'S',p'D'): 0, (p'H',p'H'): 8, (p'S',p'H'): -1, (p'H',p'D'): -1, (p'L',p'N'): -3, (p'W',p'A'): -3, (p'Y',p'M'): -1, (p'G',p'R'): -2, (p'Y',p'I'): -1, (p'Y',p'E'): -2, (p'B',p'Y'): -3, (p'Y',p'A'): -2, (p'V',p'D'): -3, (p'B',p'S'): 0, (p'Y',p'Y'): 7, (p'G',p'N'): 0, (p'E',p'C'): -4, (p'Y',p'Q'): -1, (p'Z',p'Z'): 4, (p'V',p'A'): 0, (p'C',p'C'): 9, (p'M',p'R'): -1, (p'V',p'E'): -2, (p'T',p'N'): 0, (p'P',p'P'): 7, (p'V',p'I'): 3, (p'V',p'S'): -2, (p'Z',p'P'): -1, (p'V',p'M'): 1, (p'T',p'F'): -2, (p'V',p'Q'): -2, (p'K',p'K'): 5, (p'P',p'D'): -1, (p'I',p'H'): -3, (p'I',p'D'): -3, (p'T',p'R'): -1, (p'P',p'L'): -3, (p'K',p'G'): -2, (p'M',p'N'): -2, (p'P',p'H'): -2, (p'F',p'Q'): -3, (p'Z',p'G'): -2, (p'X',p'L'): -1, (p'T',p'M'): -1, (p'Z',p'C'): -3, (p'X',p'H'): -1, (p'D',p'R'): -2, (p'B',p'W'): -4, (p'X',p'D'): -1, (p'Z',p'K'): 1, (p'F',p'A'): -2, (p'Z',p'W'): -3, (p'F',p'E'): -3, (p'D',p'N'): 1, (p'B',p'K'): 0, (p'X',p'X'): -1, (p'F',p'I'): 0, (p'B',p'G'): -1, (p'X',p'T'): 0, (p'F',p'M'): 0, (p'B',p'C'): -3, (p'Z',p'I'): -3, (p'Z',p'V'): -2, (p'S',p'S'): 4, (p'L',p'Q'): -2, (p'W',p'E'): -3, (p'Q',p'R'): 1, (p'N',p'N'): 6, (p'W',p'M'): -1, (p'Q',p'C'): -3, (p'W',p'I'): -3, (p'S',p'C'): -1, (p'L',p'A'): -1, (p'S',p'G'): 0, (p'L',p'E'): -3, (p'W',p'Q'): -2, (p'H',p'G'): -2, (p'S',p'K'): 0, (p'Q',p'N'): 0, (p'N',p'R'): 0, (p'H',p'C'): -3, (p'Y',p'N'): -2, (p'G',p'Q'): -2, (p'Y',p'F'): 3, (p'C',p'A'): 0, (p'V',p'L'): 1, (p'G',p'E'): -2, (p'G',p'A'): 0, (p'K',p'R'): 2, (p'E',p'D'): 2, (p'Y',p'R'): -2, (p'M',p'Q'): 0, (p'T',p'I'): -1, (p'C',p'D'): -3, (p'V',p'F'): -1, (p'T',p'A'): 0, (p'T',p'P'): -1, (p'B',p'P'): -2, (p'T',p'E'): -1, (p'V',p'N'): -3, (p'P',p'G'): -2, (p'M',p'A'): -1, (p'K',p'H'): -1, (p'V',p'R'): -3, (p'P',p'C'): -3, (p'M',p'E'): -2, (p'K',p'L'): -2, (p'V',p'V'): 4, (p'M',p'I'): 1, (p'T',p'Q'): -1, (p'I',p'G'): -4, (p'P',p'K'): -1, (p'M',p'M'): 5, (p'K',p'D'): -1, (p'I',p'C'): -1, (p'Z',p'D'): 1, (p'F',p'R'): -3, (p'X',p'K'): -1, (p'Q',p'D'): 0, (p'X',p'G'): -1, (p'Z',p'L'): -3, (p'X',p'C'): -2, (p'Z',p'H'): 0, (p'B',p'L'): -4, (p'B',p'H'): 0, (p'F',p'F'): 6, (p'X',p'W'): -2, (p'B',p'D'): 4, (p'D',p'A'): -2, (p'S',p'L'): -2, (p'X',p'S'): 0, (p'F',p'N'): -3, (p'S',p'R'): -1, (p'W',p'D'): -4, (p'V',p'Y'): -1, (p'W',p'L'): -2, (p'H',p'R'): 0, (p'W',p'H'): -2, (p'H',p'N'): 1, (p'W',p'T'): -2, (p'T',p'T'): 5, (p'S',p'F'): -2, (p'W',p'P'): -4, (p'L',p'D'): -4, (p'B',p'I'): -3, (p'L',p'H'): -3, (p'S',p'N'): 1, (p'B',p'T'): -1, (p'L',p'L'): 4, (p'Y',p'K'): -2, (p'E',p'Q'): 2, (p'Y',p'G'): -3, (p'Z',p'S'): 0, (p'Y',p'C'): -2, (p'G',p'D'): -1, (p'B',p'V'): -3, (p'E',p'A'): -1, (p'Y',p'W'): 2, (p'E',p'E'): 5, (p'Y',p'S'): -2, (p'C',p'N'): -3, (p'V',p'C'): -1, (p'T',p'H'): -2, (p'P',p'R'): -2, (p'V',p'G'): -3, (p'T',p'L'): -1, (p'V',p'K'): -2, (p'K',p'Q'): 1, (p'R',p'A'): -1, (p'I',p'R'): -3, (p'T',p'D'): -1, (p'P',p'F'): -4, (p'I',p'N'): -3, (p'K',p'I'): -3, (p'M',p'D'): -3, (p'V',p'W'): -3, (p'W',p'W'): 11, (p'M',p'H'): -2, (p'P',p'N'): -2, (p'K',p'A'): -1, (p'M',p'L'): 2, (p'K',p'E'): 1, (p'Z',p'E'): 4, (p'X',p'N'): -1, (p'Z',p'A'): -1, (p'Z',p'M'): -1, (p'X',p'F'): -1, (p'K',p'C'): -3, (p'B',p'Q'): 0, (p'X',p'B'): -1, (p'B',p'M'): -3, (p'F',p'C'): -2, (p'Z',p'Q'): 3, (p'X',p'Z'): -1, (p'F',p'G'): -3, (p'B',p'E'): 1, (p'X',p'V'): -1, (p'F',p'K'): -3, (p'B',p'A'): -2, (p'X',p'R'): -1, (p'D',p'D'): 6, (p'W',p'G'): -2, (p'Z',p'F'): -3, (p'S',p'Q'): 0, (p'W',p'C'): -2, (p'W',p'K'): -3, (p'H',p'Q'): 0, (p'L',p'C'): -1, (p'W',p'N'): -4, (p'S',p'A'): 1, (p'L',p'G'): -4, (p'W',p'S'): -3, (p'S',p'E'): 0, (p'H',p'E'): 0, (p'S',p'I'): -2, (p'H',p'A'): -2, (p'S',p'M'): -1, (p'Y',p'L'): -1, (p'Y',p'H'): 2, (p'Y',p'D'): -3, (p'E',p'R'): 0, (p'X',p'P'): -2, (p'G',p'G'): 6, (p'G',p'C'): -3, (p'E',p'N'): 0, (p'Y',p'T'): -2, (p'Y',p'P'): -3, (p'T',p'K'): -1, (p'A',p'A'): 4, (p'P',p'Q'): -1, (p'T',p'C'): -1, (p'V',p'H'): -3, (p'T',p'G'): -2, (p'I',p'Q'): -3, (p'Z',p'T'): -1, (p'C',p'R'): -3, (p'V',p'P'): -2, (p'P',p'E'): -1, (p'M',p'C'): -1, (p'K',p'N'): 0, (p'I',p'I'): 4, (p'P',p'A'): -1, (p'M',p'G'): -3, (p'T',p'S'): 1, (p'I',p'E'): -3, (p'P',p'M'): -2, (p'M',p'K'): -1, (p'I',p'A'): -1, (p'P',p'I'): -3, (p'R',p'R'): 5, (p'X',p'M'): -1, (p'L',p'I'): 2, (p'X',p'I'): -1, (p'Z',p'B'): 1, (p'X',p'E'): -1, (p'Z',p'N'): 0, (p'X',p'A'): 0, (p'B',p'R'): -1, (p'B',p'N'): 3, (p'F',p'D'): -3, (p'X',p'Y'): -1, (p'Z',p'R'): 0, (p'F',p'H'): -1, (p'B',p'F'): -3, (p'F',p'L'): 0, (p'X',p'Q'): -1, (p'B',p'B'): 4}
    
    for read in pFASTA(q_input):
        q = read.seq
        q_name = read.name
        pos = 0
        for kmer in q.split(k = K, step = 1):
            if kmer not in q_index:
                q_index[kmer] = [pos]
            else:
                q_index[kmer].append(pos)
            pos += 1

    # build target sequence k-mer dictionary/hash-table based on query k-mers:

    for read in pFASTA(t_input):
        t = read.seq
        t_name = read.name
        pos = 0
        for kmer in t.split(k = K, step = 1):
            if kmer in q_index:
                if kmer not in t_index:
                    t_index[kmer] = [pos]
                else:
                    t_index[kmer].append(pos)
            pos += 1

    q_length = len(q)
    t_length = len(t)
    
    # return BLOSUM62 score:
    
    def score(kmer1, kmer2):
        score = 0
        for i in range(0, K):
            try: score += blosum62[(kmer1[i], kmer2[i])]
            except: score += blosum62[(kmer2[i], kmer1[i])]
        return score

    # define substitution_blastp matrix:
            
    def substitution_blastp(qp, tp):
        score = 0
        try: 
            score += blosum62[(qp, tp)]
        except: 
            score += blosum62[(tp, qp)]
        if qp == tp:
            return (score, str(qp))
        elif score > 0:
            return (score, "+")
        else:
            return (score, " ")
       
    # define function to conduct ungapped extension of exact k-mer matches:

    def ungapped_align(qpos, tpos):
        
        ext_f = ""
        ext_b = ""
        
        q_pos = [qpos, qpos-1]
        t_pos = [tpos, tpos-1]
        
        algn_score = [0, 0, 0]
        drop_score = [0, 0]
        max_score = [0, 0]
        
        while drop_score[0] < T and q_pos[0] < q_length and t_pos[0] < t_length:
            algn = substitution_blastp(q[q_pos[0]], t[t_pos[0]])
            algn_score[0] += algn[0]
            if q_pos[0]-qpos == K:
                algn_score[1] = algn_score[0]
                algn_score[2] = algn_score[0]
                max_score[1] = algn_score[0]
            if algn_score[0] > max_score[0]:
                max_score[0] = algn_score[0]
            drop_score[0] = max_score[0]-algn_score[0]
            ext_f += algn[1]
            q_pos[0] += 1
            t_pos[0] += 1
            
        while drop_score[1] < T and q_pos[1] > -1 and t_pos[1] > -1:
            algn = substitution_blastp(q[q_pos[1]], t[t_pos[1]])
            algn_score[1] += algn[0]
            if algn_score[1] > max_score[1]:
                max_score[1] = algn_score[1]
            drop_score[1] = max_score[1]-algn_score[1]
            ext_b = algn[1]+ext_b
            q_pos[1] -= 1
            t_pos[1] -= 1
        
        q_hit = q[q_pos[1]+1:q_pos[0]]
        t_hit = t[t_pos[1]+1:t_pos[0]]
        q_begin = q_pos[1]+1
        t_begin = t_pos[1]+1
        q_end = q_pos[0]-1
        t_end = t_pos[0]-1
        align_pattern = ext_b+ext_f
        s = algn_score[0]+algn_score[1]-algn_score[2]
        bs = (0.318*s-log(0.13))/log(2)
        e = q_length*t_length*2.0**(-((0.318*s-log(0.13))/log(2)))
        
        return (q_hit, q_begin, q_end, align_pattern, t_hit, t_begin, t_end, s, bs, e)
    
    # define function to return expanded Smith-Waterman alignment from alignment CIGAR string:
    
    def cigar(cig, qa, ta):
        qaline = ""
        taline = ""
        aline = ""
        qp = 0
        tp = 0
        for size, operate in cig:
            match operate:
                case 'M' | '=' | 'X':
                    for i in range(0, size):
                        qaline += str(qa[qp])
                        qp += 1
                        taline += str(ta[tp])
                        tp += 1
                        aline += "|"
                case 'I' | 'S': 
                    for i in range(0, size):
                        taline += "-"
                        qaline += str(qa[qp])
                        qp += 1
                        aline += " "
                case 'D' | 'N' | 'H': 
                    for i in range(0, size):
                        qaline += "-"
                        taline += str(ta[tp])
                        tp += 1
                        aline += " "
                case _: pass
        return qaline[1:], aline[1:], taline[1:]
    
    print("Build Time:", time.time()-t1, "seconds.")
    t2 = time.time()

    # find initial hits of significance:
    
    hits = {}
    hits_list = []
    count = 0
    for kmer in q_index.keys():
        if kmer in t_index:
            for qpos in q_index[kmer]:
                for tpos in t_index[kmer]:
                    alignment = ungapped_align(qpos, tpos)
                    if alignment not in hits and alignment[9] < E:
                        hits[alignment] = count
                        hits_list.append(alignment)
                        count += 1
    hits_ = {v: k for k, v in hits.items()}
    
    # find neighboring hits of significance and align by Smith-Waterman:
    
    hit_keys = list(hits_.keys())
    alignments_d = {}
    alignments_s = hits_.copy()
    for i in range(0, len(hit_keys)):
        for j in range(i+1, len(hit_keys)):
            qab = hits_[hit_keys[i]][1]
            qae = hits_[hit_keys[i]][2]
            tab = hits_[hit_keys[i]][5]
            tae = hits_[hit_keys[i]][6]
            qbb = hits_[hit_keys[j]][1]
            qbe = hits_[hit_keys[j]][2]
            tbb = hits_[hit_keys[j]][5]
            tbe = hits_[hit_keys[j]][6]
            if (qbb > qae and tbb > tae):
                if (qbb - qae < n) and (tbb - tae < n):
                    algn = q[qae:qbb]@t[tae:tbb]
                    alignments_d[[hit_keys[i], hit_keys[j]]] = (cigar(algn[0], q[qae:qbb], t[tae:tbb]), algn[1]-5.8)
                    if hit_keys[i] in alignments_s:
                        del alignments_s[hit_keys[i]]                        
                    if hit_keys[j] in alignments_s:
                        del alignments_s[hit_keys[j]]                        
            if (qab > qbe and tab > tbe):
                if (qab - qbe < n) and (tab - tbe < n):
                    algn = q[qbe:qab]@t[tbe:tab]
                    alignments_d[[hit_keys[j], hit_keys[i]]] = (cigar(algn[0], q[qbe:qab], t[tbe:tab]), algn[1]-5.8)
                    if hit_keys[i] in alignments_s:
                        del alignments_s[hit_keys[i]]
                    if hit_keys[j] in alignments_s:
                        del alignments_s[hit_keys[j]]
    
    # Join multiple neighbors (IMPROVE THIS LOOP):
    
    algn_keys = list(alignments_d.keys())
    final_alignments = {}
    for i in range(0, len(algn_keys)):
        key = [algn_keys[i]]
        value = [alignments_d[algn_keys[i]]]
        join_lastf = i
        join_lastb = i
        for j in range(i+1, len(algn_keys)):
            if algn_keys[join_lastf][1] == algn_keys[j][0]:
                key.append(algn_keys[j])
                value.append(alignments_d[algn_keys[j]])
                join_lastf += 1
            if algn_keys[join_lastf][0] == algn_keys[j][1]:
                key.insert(0, algn_keys[j])
                value.insert(0, alignments_d[algn_keys[j]])
                join_lastf += 1
        if i > 1:
            for j in range(i-1, -1, -1):
                if algn_keys[join_lastb][1] == algn_keys[j][0]:
                    key.append(algn_keys[j])
                    value.append(alignments_d[algn_keys[j]])
                    join_lastb -= 1
                if algn_keys[join_lastb][0] == algn_keys[j][1]:
                    key.insert(0, algn_keys[j])
                    value.insert(0, alignments_d[algn_keys[j]])
                    join_lastb -= 1
        if key not in final_alignments:
            final_alignments[key] = value

    # build final report:

    report = {}
    keys = list(final_alignments.keys())
    for i in range(0, len(keys)):
        qaln = ""
        aaln = ""
        taln = ""
        qb = 0
        qe = 0
        tb = 0
        te = 0
        s = 0
        for j in range(0, len(keys[i])):
            if j == 0:
                qb = hits_[keys[i][j][0]][1]
                tb = hits_[keys[i][j][0]][5]
                s = int(hits_[keys[i][j][0]][7])+int(final_alignments[keys[i]][j][1])+int(hits_[keys[i][j][1]][7])
                qaln += str(hits_[keys[i][j][0]][0])+final_alignments[keys[i]][j][0][0]+str(hits_[keys[i][j][1]][0])
                aaln += hits_[keys[i][j][0]][3]+final_alignments[keys[i]][j][0][1]+hits_[keys[i][j][1]][3]
                taln += str(hits_[keys[i][j][0]][4])+final_alignments[keys[i]][j][0][2]+str(hits_[keys[i][j][1]][4])
            else:
                s += int(final_alignments[keys[i]][j][1])+int(hits_[keys[i][j][1]][7])
                qaln += final_alignments[keys[i]][j][0][0]+str(hits_[keys[i][j][1]][0])
                aaln += final_alignments[keys[i]][j][0][1]+hits_[keys[i][j][1]][3]
                taln += final_alignments[keys[i]][j][0][2]+str(hits_[keys[i][j][1]][4])
            if j == len(keys[i])-1:
                qe = hits_[keys[i][j][1]][2]
                te = hits_[keys[i][j][1]][6]
                        
        if (qaln, aaln, taln, qb, qe, tb, te) not in report:
            report[(qaln, aaln, taln, qb, qe, tb, te)] = (s, (1.37*s-log(0.711))/log(2), t_length*q_length*2**(-(1.37*s-log(0.711))/log(2)))
        
    keyz = list(alignments_s.keys())
    for i in range(0, len(keyz)):
        report[(str(alignments_s[keyz[i]][0]), alignments_s[keyz[i]][3], str(alignments_s[keyz[i]][4]), alignments_s[keyz[i]][1], alignments_s[keyz[i]][2], alignments_s[keyz[i]][5], alignments_s[keyz[i]][6])] = (alignments_s[keyz[i]][7], alignments_s[keyz[i]][8], alignments_s[keyz[i]][9])
        
    f = []
    keez = list(report.keys())    
    for i in range(0, len(keez)):
        f.append((*keez[i], *report[keez[i]]))
    final = sorted(f, key=lambda x: x[9])
    
    print("Find  Time:", time.time()-t2, "seconds.")
    
    # print results to file:
    
    with open("blast_P_gapped_output.txt", "w") as f:
        print("Query:", q_name, q_length, "\nTarget:", t_name, t_length, f"\n\nk-mer length         : {K}\nexpectation threshold: {E}\nextension threshold  : {T}\nneighbor hit distance: {n}\n", file = f)
        for i in range(0, len(final)):
            if final[i][9] < E and final[i][7] > 0:
                whitespace = max(len(f"query {final[i][3]} "), len(f"target {final[i][5]} "))
                print(f"query {final[i][3]}".rjust(whitespace, " "), f"{final[i][0]} {final[i][4]}", file = f)
                print(" "*whitespace, final[i][1], file = f)
                print(f"target {final[i][5]}".rjust(whitespace, " "), f"{final[i][2]} {final[i][6]}", file = f)
                print(f"Sub-Score: {final[i][7]} Bit-Score: {final[i][8]} Expect: {final[i][9]}\n", file = f)

        f.close()